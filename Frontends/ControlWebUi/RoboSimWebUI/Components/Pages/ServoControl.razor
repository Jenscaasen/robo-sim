@page "/servos"
@page "/joints"
@using RoboSimWebUI.Services
@inject RoboSimApiService ApiService
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Joint Control</PageTitle>

<div class="joint-container">
    <h3>Joint Control Panel</h3>
    
    <div class="control-buttons mb-4">
        <button class="btn btn-success" @onclick="RefreshAllJoints" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
            <span>Refresh All</span>
        </button>
        
        <button class="btn btn-warning ms-2" @onclick="ResetJoints" disabled="@isLoading">
            Reset to Neutral
        </button>
        
        <button class="btn btn-info ms-2" @onclick="CheckHealth" disabled="@isLoading">
            Check Health
        </button>
        
        <button class="btn btn-secondary ms-2" @onclick="ToggleAutoRefresh">
            @if (autoRefresh)
            {
                <span>Stop Auto Refresh</span>
            }
            else
            {
                <span>Start Auto Refresh</span>
            }
        </button>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            @statusMessage
            <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="ClearErrorMessage"></button>
        </div>
    }

    <div class="joint-grid">
        @foreach (var jointData in joints)
        {
            <div class="joint-card">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">@jointData.Name (ID: @jointData.Id)</h5>
                    </div>
                    <div class="card-body">
                        <div class="joint-info mb-3">
                            <div class="info-row">
                                <span class="label">Current Position:</span>
                                <span class="value">@jointData.CurrentPosition.ToString("F3") rad</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Target Position:</span>
                                <span class="value">@jointData.TargetPosition.ToString("F3") rad</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Range:</span>
                                <span class="value">@jointData.Lower.ToString("F3") to @jointData.Upper.ToString("F3") rad</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Max Force:</span>
                                <span class="value">@jointData.MaxForce.ToString("F1") N</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Max Velocity:</span>
                                <span class="value">@jointData.MaxVelocity.ToString("F1") rad/s</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Type:</span>
                                <span class="value">@(jointData.Type == 0 ? "Revolute" : "Prismatic")</span>
                            </div>
                        </div>

                        <div class="joint-control">
                            <label class="form-label">Target Position (Auto-set after 1s):</label>
                            <div class="slider-container">
                                <input type="range"
                                       class="form-range"
                                       @bind="targetPositions[jointData.Id]"
                                       @oninput="e => OnSliderChanged(jointData.Id, e)"
                                       min="@jointData.Lower"
                                       max="@jointData.Upper"
                                       step="0.01" />
                                <div class="slider-value-display">
                                    <span class="current-value">@targetPositions[jointData.Id].ToString("F3")</span>
                                    <span class="range-info">(@jointData.Lower.ToString("F3") to @jointData.Upper.ToString("F3") rad)</span>
                                </div>
                            </div>
                            <div class="button-group mt-2">
                                <button class="btn btn-primary btn-sm"
                                        @onclick="() => SetJointTarget(jointData.Id, false)"
                                        disabled="@isLoading">
                                    Set Normal
                                </button>
                                <button class="btn btn-warning btn-sm ms-2"
                                        @onclick="() => SetJointTarget(jointData.Id, true)"
                                        disabled="@isLoading">
                                    Set Instant
                                </button>
                            </div>
                            <small class="form-text text-muted">Range: @jointData.Lower.ToString("F3") to @jointData.Upper.ToString("F3") radians</small>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (joints.Any())
    {
        <div class="system-state mt-4">
            <h4>System Overview</h4>
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Active Joints</h5>
                            <p class="card-text">@joints.Length joints available</p>
                            <div class="joint-list">
                                @foreach (var joint in joints)
                                {
                                    <small class="d-block">
                                        <strong>@joint.Name</strong> (ID: @joint.Id) - @joint.CurrentPosition.ToString("F3") rad
                                    </small>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Joint Position Status</h5>
                            <div class="position-indicators">
                                @foreach (var joint in joints)
                                {
                                    <div class="position-item">
                                        <span class="joint-name">@joint.Name:</span>
                                        <div class="progress" style="height: 8px;">
                                            @{
                                                var range = joint.Upper - joint.Lower;
                                                var normalizedPosition = range > 0 ? (joint.CurrentPosition - joint.Lower) / range : 0.5;
                                                var percentage = Math.Max(0, Math.Min(100, normalizedPosition * 100));
                                            }
                                            <div class="progress-bar bg-info"
                                                 style="width: @(percentage)%"></div>
                                        </div>
                                        <small>@joint.CurrentPosition.ToString("F3") rad</small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private DetailedJointInfo[] joints = Array.Empty<DetailedJointInfo>();
    private Dictionary<int, double> targetPositions = new();
    private bool isLoading = false;
    private bool autoRefresh = false;
    private string? statusMessage;
    private string? errorMessage;
    private Timer? refreshTimer;
    private Dictionary<int, Timer?> debounceTimers = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAllJoints();
    }

    private async Task RefreshAllJoints()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            // Get all joints with detailed information
            var jointsResponse = await ApiService.GetAllJointsAsync();

            if (jointsResponse != null)
            {
                joints = jointsResponse.Joints;

                // Update target position inputs with current target values
                targetPositions.Clear();
                foreach (var joint in joints)
                {
                    targetPositions[joint.Id] = joint.TargetPosition;
                }

                statusMessage = $"Refreshed at {DateTime.Now:HH:mm:ss}";
            }
            else
            {
                errorMessage = "Failed to retrieve joint data from the server.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error refreshing joint data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetJointTarget(int jointId, bool instant)
    {
        if (!targetPositions.ContainsKey(jointId))
            return;

        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var success = instant 
                ? await ApiService.SetJointPositionInstantAsync(jointId, targetPositions[jointId])
                : await ApiService.SetJointPositionAsync(jointId, targetPositions[jointId]);
                
            if (success)
            {
                var jointName = joints.FirstOrDefault(j => j.Id == jointId)?.Name ?? $"Joint {jointId}";
                statusMessage = $"{jointName} set to {targetPositions[jointId]:F3} rad {(instant ? "(instant)" : "")}";
                // Refresh to get updated values
                await RefreshAllJoints();
            }
            else
            {
                errorMessage = $"Failed to set target for joint {jointId}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error setting joint {jointId} target: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSliderChanged(int jointId, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double newValue))
        {
            targetPositions[jointId] = newValue;

            // Cancel existing timer for this joint
            if (debounceTimers.ContainsKey(jointId) && debounceTimers[jointId] != null)
            {
                debounceTimers[jointId]?.Dispose();
                debounceTimers[jointId] = null;
            }

            // Start new timer - will send API request after 1 second if no more changes
            debounceTimers[jointId] = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    // Remove timer reference
                    debounceTimers[jointId]?.Dispose();
                    debounceTimers[jointId] = null;

                    // Send API request
                    await SetJointTargetDebounced(jointId, newValue);
                });
            }, null, 1000, Timeout.Infinite);
        }
    }

    private async Task SetJointTargetDebounced(int jointId, double targetValue)
    {
        try
        {
            var success = await ApiService.SetJointPositionAsync(jointId, targetValue);
            if (success)
            {
                // Get joint name for better user feedback
                var jointName = joints.FirstOrDefault(j => j.Id == jointId)?.Name ?? $"Joint {jointId}";
                statusMessage = $"{jointName} set to {targetValue:F3} rad";
                // Refresh to get updated values
                await RefreshAllJoints();
            }
            else
            {
                errorMessage = $"Failed to set target for joint {jointId}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error setting joint {jointId} target: {ex.Message}";
        }
    }

    private async Task ResetJoints()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var success = await ApiService.ResetJointsAsync();
            if (success)
            {
                statusMessage = "All joints reset to neutral position";
                await RefreshAllJoints();
            }
            else
            {
                errorMessage = "Failed to reset joints";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error resetting joints: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CheckHealth()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var isHealthy = await ApiService.CheckHealthAsync();
            if (isHealthy)
            {
                statusMessage = "API is healthy and responding";
            }
            else
            {
                errorMessage = "API health check failed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error checking health: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleAutoRefresh()
    {
        autoRefresh = !autoRefresh;
        
        if (autoRefresh)
        {
            // Start auto refresh every 3 seconds
            refreshTimer = new Timer(async _ => await InvokeAsync(RefreshAllJoints), null, TimeSpan.Zero, TimeSpan.FromSeconds(3));
        }
        else
        {
            // Stop auto refresh
            refreshTimer?.Dispose();
            refreshTimer = null;
        }
        
        StateHasChanged();
    }

    private void ClearStatusMessage()
    {
        statusMessage = null;
        StateHasChanged();
    }

    private void ClearErrorMessage()
    {
        errorMessage = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();

        // Dispose all debounce timers
        foreach (var timer in debounceTimers.Values)
        {
            timer?.Dispose();
        }
        debounceTimers.Clear();
    }
}

<style>
    .joint-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .joint-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .joint-card .card {
        height: 100%;
        border: 1px solid #dee2e6;
        border-radius: 8px;
    }

    .joint-card .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .joint-info {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 4px;
    }

    .info-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }

    .info-row:last-child {
        margin-bottom: 0;
    }

    .label {
        font-weight: 500;
        color: #495057;
    }

    .value {
        font-weight: 600;
        color: #212529;
    }

    .joint-control {
        margin-top: 15px;
    }

    .slider-container {
        margin-bottom: 10px;
    }

    .form-range {
        width: 100%;
        margin-bottom: 5px;
    }

    .slider-value-display {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.9rem;
    }

    .current-value {
        font-weight: bold;
        color: #007bff;
        background-color: #f8f9fa;
        padding: 2px 6px;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .range-info {
        color: #6c757d;
        font-size: 0.8rem;
    }

    .button-group {
        display: flex;
        gap: 5px;
    }

    .control-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .position-indicators {
        max-height: 200px;
        overflow-y: auto;
    }

    .position-item {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 8px;
    }

    .position-item:last-child {
        margin-bottom: 0;
    }

    .joint-name {
        min-width: 120px;
        font-weight: 500;
    }

    .joint-list {
        max-height: 150px;
        overflow-y: auto;
    }

    .joint-list small {
        margin-bottom: 4px;
    }

    .system-state h4, .system-state h5 {
        color: #495057;
    }
</style>